
FAN.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000272  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00000272  000002e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000324  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a2d  00000000  00000000  000003a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000068c  00000000  00000000  00000dd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000455  00000000  00000000  00001461  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  000018b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000359  00000000  00000000  00001948  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004ac  00000000  00000000  00001ca1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  0000214d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e7       	ldi	r30, 0x72	; 114
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <main>
  7a:	0c 94 37 01 	jmp	0x26e	; 0x26e <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <lcdcmd>:
#define LCD PORTB
#define EN 7
#define RS 5
#define RW 6
void lcdcmd(unsigned char cmd){
	PORTD &= ~(1<<RS);
  82:	92 b3       	in	r25, 0x12	; 18
  84:	9f 7d       	andi	r25, 0xDF	; 223
  86:	92 bb       	out	0x12, r25	; 18
	PORTD &= ~(1<<RW);
  88:	92 b3       	in	r25, 0x12	; 18
  8a:	9f 7b       	andi	r25, 0xBF	; 191
  8c:	92 bb       	out	0x12, r25	; 18
	LCD=cmd& 0xF0;
  8e:	98 2f       	mov	r25, r24
  90:	90 7f       	andi	r25, 0xF0	; 240
  92:	98 bb       	out	0x18, r25	; 24
	PORTD |=(1<<EN);
  94:	92 b3       	in	r25, 0x12	; 18
  96:	90 68       	ori	r25, 0x80	; 128
  98:	92 bb       	out	0x12, r25	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	ef e8       	ldi	r30, 0x8F	; 143
  9c:	f1 e0       	ldi	r31, 0x01	; 1
  9e:	31 97       	sbiw	r30, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <lcdcmd+0x1c>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <lcdcmd+0x22>
  a4:	00 00       	nop
	_delay_ms(1);
	PORTD &= ~(1<<EN);
  a6:	92 b3       	in	r25, 0x12	; 18
  a8:	9f 77       	andi	r25, 0x7F	; 127
  aa:	92 bb       	out	0x12, r25	; 18
	
	LCD=cmd<<4;
  ac:	82 95       	swap	r24
  ae:	80 7f       	andi	r24, 0xF0	; 240
  b0:	88 bb       	out	0x18, r24	; 24
	PORTD |=(1<<EN);
  b2:	82 b3       	in	r24, 0x12	; 18
  b4:	80 68       	ori	r24, 0x80	; 128
  b6:	82 bb       	out	0x12, r24	; 18
  b8:	8f e8       	ldi	r24, 0x8F	; 143
  ba:	91 e0       	ldi	r25, 0x01	; 1
  bc:	01 97       	sbiw	r24, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <lcdcmd+0x3a>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <lcdcmd+0x40>
  c2:	00 00       	nop
	_delay_ms(1);
	PORTD &= ~(1<<EN);
  c4:	82 b3       	in	r24, 0x12	; 18
  c6:	8f 77       	andi	r24, 0x7F	; 127
  c8:	82 bb       	out	0x12, r24	; 18
  ca:	08 95       	ret

000000cc <lcddata>:
}
void lcddata(unsigned char data){
	PORTD |= (1<<RS);
  cc:	92 b3       	in	r25, 0x12	; 18
  ce:	90 62       	ori	r25, 0x20	; 32
  d0:	92 bb       	out	0x12, r25	; 18
	PORTD &= ~(1<<RW);
  d2:	92 b3       	in	r25, 0x12	; 18
  d4:	9f 7b       	andi	r25, 0xBF	; 191
  d6:	92 bb       	out	0x12, r25	; 18
	LCD=data& 0xF0;
  d8:	98 2f       	mov	r25, r24
  da:	90 7f       	andi	r25, 0xF0	; 240
  dc:	98 bb       	out	0x18, r25	; 24
	PORTD |=(1<<EN);
  de:	92 b3       	in	r25, 0x12	; 18
  e0:	90 68       	ori	r25, 0x80	; 128
  e2:	92 bb       	out	0x12, r25	; 18
  e4:	ef e8       	ldi	r30, 0x8F	; 143
  e6:	f1 e0       	ldi	r31, 0x01	; 1
  e8:	31 97       	sbiw	r30, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <lcddata+0x1c>
  ec:	00 c0       	rjmp	.+0      	; 0xee <lcddata+0x22>
  ee:	00 00       	nop
	_delay_ms(1);
	PORTD &= ~(1<<EN);
  f0:	92 b3       	in	r25, 0x12	; 18
  f2:	9f 77       	andi	r25, 0x7F	; 127
  f4:	92 bb       	out	0x12, r25	; 18
	
	LCD=data<<4;
  f6:	82 95       	swap	r24
  f8:	80 7f       	andi	r24, 0xF0	; 240
  fa:	88 bb       	out	0x18, r24	; 24
	PORTD |=(1<<EN);
  fc:	82 b3       	in	r24, 0x12	; 18
  fe:	80 68       	ori	r24, 0x80	; 128
 100:	82 bb       	out	0x12, r24	; 18
 102:	8f e8       	ldi	r24, 0x8F	; 143
 104:	91 e0       	ldi	r25, 0x01	; 1
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <lcddata+0x3a>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <lcddata+0x40>
 10c:	00 00       	nop
	_delay_ms(1);
	PORTD &= ~(1<<EN);
 10e:	82 b3       	in	r24, 0x12	; 18
 110:	8f 77       	andi	r24, 0x7F	; 127
 112:	82 bb       	out	0x12, r24	; 18
 114:	08 95       	ret

00000116 <lcd_init>:
}
void lcd_init(){
	DDRB =0XFF;
 116:	8f ef       	ldi	r24, 0xFF	; 255
 118:	87 bb       	out	0x17, r24	; 23
	DDRD =0xFF;
 11a:	81 bb       	out	0x11, r24	; 17
	PORTD &= ~(1<<EN);
 11c:	82 b3       	in	r24, 0x12	; 18
 11e:	8f 77       	andi	r24, 0x7F	; 127
 120:	82 bb       	out	0x12, r24	; 18
	lcdcmd(0x33);
 122:	83 e3       	ldi	r24, 0x33	; 51
 124:	0e 94 41 00 	call	0x82	; 0x82 <lcdcmd>
	lcdcmd(0x32);
 128:	82 e3       	ldi	r24, 0x32	; 50
 12a:	0e 94 41 00 	call	0x82	; 0x82 <lcdcmd>
	lcdcmd(0x28);
 12e:	88 e2       	ldi	r24, 0x28	; 40
 130:	0e 94 41 00 	call	0x82	; 0x82 <lcdcmd>
	lcdcmd(0x0E);
 134:	8e e0       	ldi	r24, 0x0E	; 14
 136:	0e 94 41 00 	call	0x82	; 0x82 <lcdcmd>
	lcdcmd(0x01);
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	0e 94 41 00 	call	0x82	; 0x82 <lcdcmd>
 140:	8f e1       	ldi	r24, 0x1F	; 31
 142:	93 e0       	ldi	r25, 0x03	; 3
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <lcd_init+0x2e>
 148:	00 c0       	rjmp	.+0      	; 0x14a <lcd_init+0x34>
 14a:	00 00       	nop
 14c:	08 95       	ret

0000014e <lcd_print>:
	_delay_ms(2);
	
}
void lcd_print(char *str){
 14e:	0f 93       	push	r16
 150:	1f 93       	push	r17
 152:	cf 93       	push	r28
 154:	8c 01       	movw	r16, r24
	unsigned char i=0;
 156:	c0 e0       	ldi	r28, 0x00	; 0
	while(str[i]!=0){
 158:	03 c0       	rjmp	.+6      	; 0x160 <lcd_print+0x12>
		lcddata(str[i]);
 15a:	0e 94 66 00 	call	0xcc	; 0xcc <lcddata>
		i++;
 15e:	cf 5f       	subi	r28, 0xFF	; 255
	_delay_ms(2);
	
}
void lcd_print(char *str){
	unsigned char i=0;
	while(str[i]!=0){
 160:	f8 01       	movw	r30, r16
 162:	ec 0f       	add	r30, r28
 164:	f1 1d       	adc	r31, r1
 166:	80 81       	ld	r24, Z
 168:	81 11       	cpse	r24, r1
 16a:	f7 cf       	rjmp	.-18     	; 0x15a <lcd_print+0xc>
		lcddata(str[i]);
		i++;
	}
}
 16c:	cf 91       	pop	r28
 16e:	1f 91       	pop	r17
 170:	0f 91       	pop	r16
 172:	08 95       	ret

00000174 <convertndisplay>:

void convertndisplay(unsigned char value)
{
 174:	cf 93       	push	r28
 176:	df 93       	push	r29
	unsigned char x,d1=0,d2=0;
	x=(value/10);
 178:	cd ec       	ldi	r28, 0xCD	; 205
 17a:	8c 9f       	mul	r24, r28
 17c:	c1 2d       	mov	r28, r1
 17e:	11 24       	eor	r1, r1
 180:	c6 95       	lsr	r28
 182:	c6 95       	lsr	r28
 184:	c6 95       	lsr	r28
	d1=x;
	d2=value%10;
 186:	2c 2f       	mov	r18, r28
 188:	22 0f       	add	r18, r18
 18a:	92 2f       	mov	r25, r18
 18c:	99 0f       	add	r25, r25
 18e:	99 0f       	add	r25, r25
 190:	92 0f       	add	r25, r18
 192:	d8 2f       	mov	r29, r24
 194:	d9 1b       	sub	r29, r25
	lcdcmd(0x8D);
 196:	8d e8       	ldi	r24, 0x8D	; 141
 198:	0e 94 41 00 	call	0x82	; 0x82 <lcdcmd>
	lcddata(d1+0x30);
 19c:	80 e3       	ldi	r24, 0x30	; 48
 19e:	8c 0f       	add	r24, r28
 1a0:	0e 94 66 00 	call	0xcc	; 0xcc <lcddata>
	lcddata(d2+0x30);
 1a4:	80 e3       	ldi	r24, 0x30	; 48
 1a6:	8d 0f       	add	r24, r29
 1a8:	0e 94 66 00 	call	0xcc	; 0xcc <lcddata>
}
 1ac:	df 91       	pop	r29
 1ae:	cf 91       	pop	r28
 1b0:	08 95       	ret

000001b2 <main>:


int main()
{
	lcd_init();
 1b2:	0e 94 8b 00 	call	0x116	; 0x116 <lcd_init>
	lcd_print("Temperature:");
 1b6:	80 e6       	ldi	r24, 0x60	; 96
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_print>
	DDRA |= (1<<0);
 1be:	8a b3       	in	r24, 0x1a	; 26
 1c0:	81 60       	ori	r24, 0x01	; 1
 1c2:	8a bb       	out	0x1a, r24	; 26
	ADCSRA=0x87;
 1c4:	87 e8       	ldi	r24, 0x87	; 135
 1c6:	86 b9       	out	0x06, r24	; 6
	ADMUX=0xE0;
 1c8:	80 ee       	ldi	r24, 0xE0	; 224
 1ca:	87 b9       	out	0x07, r24	; 7
	DDRC=0xFF;
 1cc:	8f ef       	ldi	r24, 0xFF	; 255
 1ce:	84 bb       	out	0x14, r24	; 20
	
	{
		unsigned char Temp;
		unsigned char i;

		ADCSRA |= (1<<ADSC);
 1d0:	86 b1       	in	r24, 0x06	; 6
 1d2:	80 64       	ori	r24, 0x40	; 64
 1d4:	86 b9       	out	0x06, r24	; 6
		while((ADCSRA&(1<<ADIF))==0);
 1d6:	34 9b       	sbis	0x06, 4	; 6
 1d8:	fe cf       	rjmp	.-4      	; 0x1d6 <main+0x24>
		Temp=ADCH;
 1da:	c5 b1       	in	r28, 0x05	; 5
		convertndisplay(Temp);
 1dc:	8c 2f       	mov	r24, r28
 1de:	0e 94 ba 00 	call	0x174	; 0x174 <convertndisplay>
 1e2:	8f e1       	ldi	r24, 0x1F	; 31
 1e4:	9e e4       	ldi	r25, 0x4E	; 78
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <main+0x34>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <main+0x3a>
 1ec:	00 00       	nop
		//PORTC=0b11101111; // for rotate clock wise
		/*_delay_ms(200);
		PORTC=0xFF; // for anti clockwise
		_delay_ms(200);*/
		i=64;
		OCR0=i;
 1ee:	80 e4       	ldi	r24, 0x40	; 64
 1f0:	8c bf       	out	0x3c, r24	; 60
		TCCR0=0x61;
 1f2:	91 e6       	ldi	r25, 0x61	; 97
 1f4:	93 bf       	out	0x33, r25	; 51
		GICR=(1<<INT0);
 1f6:	8b bf       	out	0x3b, r24	; 59
		MCUCR=0x02;
 1f8:	82 e0       	ldi	r24, 0x02	; 2
 1fa:	85 bf       	out	0x35, r24	; 53
		sei();
 1fc:	78 94       	sei
		

		if (Temp>0 && Temp<41)
 1fe:	8f ef       	ldi	r24, 0xFF	; 255
 200:	8c 0f       	add	r24, r28
 202:	88 32       	cpi	r24, 0x28	; 40
 204:	88 f4       	brcc	.+34     	; 0x228 <__EEPROM_REGION_LENGTH__+0x28>
		{
			PORTC=0b00001001;
 206:	89 e0       	ldi	r24, 0x09	; 9
 208:	85 bb       	out	0x15, r24	; 21
 20a:	8f e9       	ldi	r24, 0x9F	; 159
 20c:	9f e0       	ldi	r25, 0x0F	; 15
 20e:	01 97       	sbiw	r24, 0x01	; 1
 210:	f1 f7       	brne	.-4      	; 0x20e <__EEPROM_REGION_LENGTH__+0xe>
 212:	00 c0       	rjmp	.+0      	; 0x214 <__EEPROM_REGION_LENGTH__+0x14>
 214:	00 00       	nop
			
			_delay_ms(10);
			PORTC=0b00000001;
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	85 bb       	out	0x15, r24	; 21
 21a:	8f ed       	ldi	r24, 0xDF	; 223
 21c:	9e e2       	ldi	r25, 0x2E	; 46
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <__EEPROM_REGION_LENGTH__+0x1e>
 222:	00 c0       	rjmp	.+0      	; 0x224 <__EEPROM_REGION_LENGTH__+0x24>
 224:	00 00       	nop
 226:	d4 cf       	rjmp	.-88     	; 0x1d0 <main+0x1e>
			_delay_ms(30);
		} 
		else if(Temp>=41 && Temp<81)
 228:	87 ed       	ldi	r24, 0xD7	; 215
 22a:	8c 0f       	add	r24, r28
 22c:	88 32       	cpi	r24, 0x28	; 40
 22e:	88 f4       	brcc	.+34     	; 0x252 <__EEPROM_REGION_LENGTH__+0x52>
		{
			PORTC=0b00001010;
 230:	8a e0       	ldi	r24, 0x0A	; 10
 232:	85 bb       	out	0x15, r24	; 21
 234:	8f e7       	ldi	r24, 0x7F	; 127
 236:	9e e3       	ldi	r25, 0x3E	; 62
 238:	01 97       	sbiw	r24, 0x01	; 1
 23a:	f1 f7       	brne	.-4      	; 0x238 <__EEPROM_REGION_LENGTH__+0x38>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <__EEPROM_REGION_LENGTH__+0x3e>
 23e:	00 00       	nop
			
			_delay_ms(40);
			PORTC=0b00000010;
 240:	82 e0       	ldi	r24, 0x02	; 2
 242:	85 bb       	out	0x15, r24	; 21
 244:	8f e7       	ldi	r24, 0x7F	; 127
 246:	9e e3       	ldi	r25, 0x3E	; 62
 248:	01 97       	sbiw	r24, 0x01	; 1
 24a:	f1 f7       	brne	.-4      	; 0x248 <__EEPROM_REGION_LENGTH__+0x48>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <__EEPROM_REGION_LENGTH__+0x4e>
 24e:	00 00       	nop
 250:	bf cf       	rjmp	.-130    	; 0x1d0 <main+0x1e>
			_delay_ms(40);

			
		}
		else if(Temp>=81 && Temp<100)
 252:	8f ea       	ldi	r24, 0xAF	; 175
 254:	8c 0f       	add	r24, r28
 256:	83 31       	cpi	r24, 0x13	; 19
 258:	18 f4       	brcc	.+6      	; 0x260 <__EEPROM_REGION_LENGTH__+0x60>
		{
			PORTC=0b00001100;
 25a:	8c e0       	ldi	r24, 0x0C	; 12
 25c:	85 bb       	out	0x15, r24	; 21
 25e:	b8 cf       	rjmp	.-144    	; 0x1d0 <main+0x1e>
			
			

		}
		else if(Temp>=100)
 260:	c4 36       	cpi	r28, 0x64	; 100
 262:	18 f0       	brcs	.+6      	; 0x26a <__EEPROM_REGION_LENGTH__+0x6a>
		{
			PORTC=0b11101100;
 264:	8c ee       	ldi	r24, 0xEC	; 236
 266:	85 bb       	out	0x15, r24	; 21
 268:	b3 cf       	rjmp	.-154    	; 0x1d0 <main+0x1e>
			
		}
		else{
			PORTC=0x00;
 26a:	15 ba       	out	0x15, r1	; 21
 26c:	b1 cf       	rjmp	.-158    	; 0x1d0 <main+0x1e>

0000026e <_exit>:
 26e:	f8 94       	cli

00000270 <__stop_program>:
 270:	ff cf       	rjmp	.-2      	; 0x270 <__stop_program>
